// <auto-generated />
using System;
using EFDataAccessLibrary.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EFDataAccessLibrary.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210905203801_EventTeamMatchCreation")]
    partial class EventTeamMatchCreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EFDataAccessLibrary.Models.Event", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PrizePool")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventID");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.EventTeam", b =>
                {
                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.HasKey("EventID", "TeamID");

                    b.HasIndex("TeamID");

                    b.ToTable("EventTeam");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Map", b =>
                {
                    b.Property<int>("MapID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MapID");

                    b.ToTable("Map");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Match", b =>
                {
                    b.Property<int>("MatchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EventID")
                        .HasColumnType("int");

                    b.Property<int?>("MapID")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreTeam1")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreTeam2")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Team1TeamID")
                        .HasColumnType("int");

                    b.Property<int?>("Team2TeamID")
                        .HasColumnType("int");

                    b.HasKey("MatchID");

                    b.HasIndex("EventID");

                    b.HasIndex("MapID");

                    b.HasIndex("Team1TeamID");

                    b.HasIndex("Team2TeamID");

                    b.ToTable("Match");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.NewsContent", b =>
                {
                    b.Property<int>("NewsContentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NewsContentID");

                    b.ToTable("NewsContent");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.NewsHeader", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("NewsContentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("NewsCreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewsDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NewsPublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewsTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NewsId");

                    b.HasIndex("NewsContentID");

                    b.ToTable("NewsHeader");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Player", b =>
                {
                    b.Property<int>("PlayerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Aim")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsForSale")
                        .HasColumnType("bit");

                    b.Property<int>("Knowledge")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("NickName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("PlayerLevel")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerPositionPositionID")
                        .HasColumnType("int");

                    b.Property<int>("PositionID")
                        .HasColumnType("int");

                    b.Property<int>("Potencial")
                        .HasColumnType("int");

                    b.Property<double>("Prize")
                        .HasColumnType("float");

                    b.HasKey("PlayerID");

                    b.HasIndex("PlayerPositionPositionID");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.PlayerPosition", b =>
                {
                    b.Property<int>("PositionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("PositionID");

                    b.ToTable("PlayerPosition");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.PlayerTeam", b =>
                {
                    b.Property<int>("PlayerID")
                        .HasColumnType("int");

                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExitDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PlayerID", "TeamID");

                    b.HasIndex("TeamID");

                    b.ToTable("PlayerTeam");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Team", b =>
                {
                    b.Property<int>("TeamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Tag")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("TeamName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeamID");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.EventTeam", b =>
                {
                    b.HasOne("EFDataAccessLibrary.Models.Event", "Event")
                        .WithMany("EventTeams")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDataAccessLibrary.Models.Team", "Team")
                        .WithMany("EventTeams")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Match", b =>
                {
                    b.HasOne("EFDataAccessLibrary.Models.Event", "Event")
                        .WithMany("Matches")
                        .HasForeignKey("EventID");

                    b.HasOne("EFDataAccessLibrary.Models.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapID");

                    b.HasOne("EFDataAccessLibrary.Models.Team", "Team1")
                        .WithMany()
                        .HasForeignKey("Team1TeamID");

                    b.HasOne("EFDataAccessLibrary.Models.Team", "Team2")
                        .WithMany()
                        .HasForeignKey("Team2TeamID");

                    b.Navigation("Event");

                    b.Navigation("Map");

                    b.Navigation("Team1");

                    b.Navigation("Team2");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.NewsHeader", b =>
                {
                    b.HasOne("EFDataAccessLibrary.Models.NewsContent", "NewsContent")
                        .WithMany()
                        .HasForeignKey("NewsContentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewsContent");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Player", b =>
                {
                    b.HasOne("EFDataAccessLibrary.Models.PlayerPosition", "PlayerPosition")
                        .WithMany()
                        .HasForeignKey("PlayerPositionPositionID");

                    b.Navigation("PlayerPosition");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.PlayerTeam", b =>
                {
                    b.HasOne("EFDataAccessLibrary.Models.Player", "Player")
                        .WithMany("PlayerTeam")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDataAccessLibrary.Models.Team", "Team")
                        .WithMany("PlayerTeam")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Event", b =>
                {
                    b.Navigation("EventTeams");

                    b.Navigation("Matches");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Player", b =>
                {
                    b.Navigation("PlayerTeam");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Team", b =>
                {
                    b.Navigation("EventTeams");

                    b.Navigation("PlayerTeam");
                });
#pragma warning restore 612, 618
        }
    }
}
